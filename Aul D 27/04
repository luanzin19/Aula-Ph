Funções
Imagine uma operação de soma entre duas variáveis a e b. Simples não é? Basta somar a + b, e está resolvido. Vamos acrescentar um ponto a este cenário, imagine que há outras variáveis no programa que você está desenvolvendo, as quais também precisam ser somadas. Então, teríamos em seu código algo assim:

//codigo codigo codigo
soma = a + b
//codigo codigo codigo
soma2 = c + d
*//codigo codigo codigo

soma3 = n + m
Para evitar essa repetição desnecessária de linhas de programação similares, usa-se estruturas denominadas funções. Uma função é um trecho de código que só é executado quando é chamado. Uma função pode ter como output, dados ou uma impressão em tela.


#Declaração da função 
def primeiraFuncao():
  print('Minha primeira função, ó!')

#chamando a função
primeiraFuncao()
     
Minha primeira função, ó!


     
Minha primeira função, ó!

#Declaração da função
def my_first_function():
  print('minha primeira função')
     

#chamando uma função
my_first_function()
     
Argumentos / parâmetros


     

def pronomeTratam(pronome):
  print(pronome," Pablo")
     

pronomeTratam('Doutor')
pronomeTratam('Ilmo')
pronomeTratam('Seu')
     
Doutor  Pablo
Ilmo  Pablo
Seu  Pablo

#Uma função deve ser chamada com o número certinho de argumentos
def boasVindas(nome, cargo):
  print('Olá, '+ cargo + ' '+ nome)
     

boasVindas('Amaralina', 'Engenheira')
boasVindas('Jorge', 'Carimbador')
boasVindas('Maria', 'Sargento')
#Experimente passar apenas um dos parâmetros
#boasVindas('Lucas')
     
Olá, Engenheira Amaralina
Olá, Carimbador Jorge
Olá, Sargento Maria

def funcaoSemNome(nome, anoNascim):
  idade = 2023 - anoNascim
  print(nome, idade)
     

funcaoSemNome('Pablo', 1982)
     
Pablo 41

def media(*notas):
  soma = 0
  for nota in notas:
    soma += nota
  print(soma / len(notas))
     

media(8, 5, 3, 7, 2, 10,7, 10)
     
6.5

#Argumentos arbitrários *args 
#Quando não se tem certeza quantos argumentos são passados pela função

def mediaTotal(*notas):
  soma = 0
  for nota in notas:
    soma += nota
  media = soma/len(notas)
  print('A média é: ', media)
     

mediaTotal(8, 9, 9, 5, 10, 4)
     

#Valor de parâmetro padrão
def nacionalidade(country = 'Cuba'):
  print('Eu nasci em: '+ country)
     

nacionalidade('Brasil')
nacionalidade('França')
nacionalidade('Vietnã')
nacionalidade()
     
Eu nasci em: Brasil
Eu nasci em: França
Eu nasci em: Vietnã
Eu nasci em: Cuba
RETURN
Até este momento, as funções criadas apenas printam na tela o seu resultado.
Para utilizar utilizar os dados de uma função em outras partes do software, usa-se a palavra reservada return.

def imc(peso, altura):
  return peso/altura**2 
     

def situacaoPeso(imc):
  if(imc < 18.5):
    print('Abaixo do peso normal')
  elif(imc < 24.9):
    print('Peso normal')
  else:
    print('Obesidade')
     

situacaoPeso(imc(83, 1.65))
     
Obesidade

#Soma
def soma(a, b):
  return a + b
#Subtração
def subtracao(a, b):
  return a - b
#Multiplicação
def vezes(a, b):
  return a * b
#Divisão
def divisao(a, b):
  return a / b
     

#O cálculo de Juros Simples é dado pela fórmula:
# J = C * i * t
# Sendo:
# J = juros simples
# C = capital inicial
# i = taxa de juros
# t = tempo de aplicação
#Crie uma função que recebe um valor de empréstimo e o
#tempo e retorne quanto será pago de juros ao final do período
#use uma taxa de juros de 2.5%
     

def jurosSimples(valor, tempo):
  return valor * 0.025 * tempo

def simulacao(capital, juros):
  return juros + capital
     

valorEmprestimo = float(input('Digite o valor do empréstimo: '))
tempo = float(input('Digite o tempo do empréstimo: '))
juros = jurosSimples(valorEmprestimo, tempo)

simulacao(valorEmprestimo, juros)
     
Digite o valor do empréstimo: 1500
Digite o tempo do empréstimo: 12
1950.0

#1 - Escreva uma função que Recebe uma lista de strings e retorna:
  ## apenas as palavras que começam com a letra A
  ## imprime a quantidade de palavras encontradas
#2 - Escreva uma função que receba uma lista de números e retorne o produto desses números.
#3 - Escreva uma função que receba uma lista de números e retorne a soma dos números pares.
#4 - Função rebe uma lista de nomes, e retorna a string com o maior número de caracteres.
     

frutas = ['banana', 'abacaxi', 'abacate', 'goiaba', 'uva', 'jaca', 'acerola']

def iniciaComA(lista):
  wordA = []
  for f in frutas:
    if(f[0] == 'a'):
      wordA.append(f)
  print(len(wordA), 'palavras encontradas iniciando com a letra "a":')
  return wordA

iniciaComA(frutas)

     
3 palavras encontradas iniciando com a letra "a":
['abacaxi', 'abacate', 'acerola']

#2 - Escreva uma função que receba uma lista de números e retorne o produto desses números
nums = [4, 3, 2, 14, 3, 2, 3, 2, 1, 3, 4, 4]

def produtoNumeros(numeros):
  produto = 1
  for numero in numeros:
    produto *= numero
  return produto

def somaPares(numeros):
  soma = 0
  for n in numeros:
    if(n % 2 == 0):
      soma += n
  return soma

print(produtoNumeros(nums))
print(somaPares(nums))
     
580608
32

somatorio(numerozinhos)
     
20

#4 - Função recebe uma lista de nomes, e retorna a 
#string com o maior número de caracteres.
users = ['zeca', 'anastacio', 'josefina', 'ivo Manoel da Silva', 'amaralin']

def maiorString(users):
  maior = ''
  for u in users:
    if(len(u) >= len(maior)):
      maior = u
  return maior

maiorString(users)
     
Recursão
'Recursividade' é um termo usado de maneira mais geral para descrever o processo de repetição de um objeto de um jeito similar ao que já fora mostrado. Um bom exemplo disso são as imagens repetidas que aparecem quando dois espelhos são apontados um para o outro.

#Cálculo de fatorial:
# O fatorial de um número é o produto dele pelos seus antecessores maiores que 0:
#Por exemplo, o fatorial de 6 é: 6! = 6*5*4*3*2*1.
def fatorial(n):
  if(n <= 1):
    return 1
  else:
    return n * fatorial(n-1)

print(fatorial(0))
print(fatorial(1))
print(fatorial(3))
print(fatorial(4))   
print(fatorial(12))
     

#Usando a recursividade, faça uma função que escreve a sequência de Fibonacci.
#Pesquise outras aplicações de quando usar funções recursivas.
     
120
Funções Lambda - quando usar funções anônimas?

#Até aqui você aprendeu a fazer funções deste tipo
def dobro(num):
  return 2*num
     

#Reescrevendo a função dobro, como função lambda
dobroLam = lambda num : num * 2
     

dobroLam(67)
     
134

#Reescreva as funções a seguir como funções lambda
def soma(num1, num2):
  return num1 + num2
#VersãoLambda
somaLam = lambda a, b : a+b

def media (nota1, nota2, nota3):
  return (nota1+nota2+nota3)/3
#versão Lambda
mediaLam =lambda a, b, c : (a+b+c)/3

def imc(peso, altura):
  return peso/altura**2
#Versão Lambda
imcLam = lambda p, a: p/a**2
print(imcLam(80, 1.7))
     
27.68166089965398
Pesquise:

Em quais situações se deve utlizar funções Lambda?

#Usando com a função filter
notas = [8, 9, 4, 5.5, 3, 7, 9.5, 7.3]
conceitos=[2, 4, 7, 10, 8]
     

def aprovados(nota):
  return nota >= 7

listAprovados = list(filter(aprovados, conceitos))

listAprovados


     
[7, 10, 8]

listAprovados2 = list(filter(lambda nota : nota >= 7, notas))

listAprovados2
     
[8, 9, 7, 9.5, 7.3]

nums = [4, 3, 2, 14, 3, 2, 3, 2, 1, 3, 4, 4]
numeros = [2, 3, 4, 6, 7, 4, 32, 2]

numerosPares = list(filter(lambda num : num%2 == 0, numeros))
sum(numerosPares)
